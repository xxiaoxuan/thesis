//
// From Data Prefetching Championship Simulator 2
// Seth Pugsley, seth.h.pugsley@intel.com
//

/*

  This file describes an Instruction Pointer-based (Program Counter-based) stride prefetcher.  
  The prefetcher detects stride patterns coming from the same IP, and then 
  prefetches additional cache lines.

  Prefetches are issued into the L2 or LLC depending on L2 MSHR occupancy.

 */
#include <bitset>
#include <math.h>
#include "cache.h"

// define testing variables

#define IP_SEGMENT 64 // number of PC segment
#define ADDR_SEGMENT 64 // number of address segement
#define ALPHA 1    
#define PREFETCH_DEGREE 1

// define weight matrix

double IP_weight [64][IP_SEGMENT]; // wm is the IP_weight[m]
double ADDR_weight[64][ADDR_SEGMENT];


class INFO_TUPLE {
	public:
	  uint64_t last_addr;
	  uint64_t last_ip;
	  uint64_t last_pred;
	  int fetch_count;
	  int correct_pred;
	  uint64_t last_delta;
	  int last_delta_sign;
	  int delta_good;

	  INFO_TUPLE () {
		  last_addr = 0;
		  last_ip = 0;
		  last_pred = 0;
		  fetch_count = 0;
		  correct_pred = 0;
		  last_delta = 0;
		  last_delta_sign = 1; // 1 being positive 
		  delta_good = 1;
	  };
};
INFO_TUPLE last_pred_info;

// function for update weight
void weight_update(uint64_t addr, uint64_t ip) // modify PC_weight, ADDR_weight
{
	//wm new = wm old -a (d-r) f(x)
	unsigned int addr_real[64];
	unsigned int addr_pred[64];
	
	
	//printf("current addr: %llx last pred: %llx \n",addr, last_pred_info.last_pred);
	uint64_t pa_mask = 0xffffffffffffffff << LOG2_BLOCK_SIZE;
	if ((addr & pa_mask)==(last_pred_info.last_pred & pa_mask)){
		last_pred_info.correct_pred += 1;
	}
	// add bias as delta
	if ((addr >> LOG2_PAGE_SIZE) == (last_pred_info.last_pred >> LOG2_PAGE_SIZE)){
        // check the MSHR occupancy to decide if we're going to prefetch to the L2 or LLC
    	if (addr > last_pred_info.last_pred){
    		last_pred_info.last_delta = addr - last_pred_info.last_pred;
    		last_pred_info.last_delta_sign = 1;
    	} else{
    		last_pred_info.last_delta = last_pred_info.last_pred - addr;
    		last_pred_info.last_delta_sign = 0;
    	}
    	last_pred_info.delta_good = 1;
    }else{
    	last_pred_info.delta_good = 0; 
    }
    //printf("pred_delta = %llu, sign = %d\n",last_pred_info.last_delta, last_pred_info.last_delta_sign );
	

	uint64_t ip_seg [IP_SEGMENT];
	uint64_t addr_seg [ADDR_SEGMENT];

	int ip_seg_len = 64/IP_SEGMENT;
	int addr_seg_len = 64/ADDR_SEGMENT;
	// making input vector
	uint64_t ip_mask = (1 << ip_seg_len) - 1;
	uint64_t addr_mask = (1 << addr_seg_len) - 1;
	int i,j;
	for (i =0;i < IP_SEGMENT; i++){
		ip_seg [i] = (last_pred_info.last_ip >> (i*ip_seg_len) ) & ip_mask;
	}
	for (j=0;j<ADDR_SEGMENT;j++){
		addr_seg [j] = (last_pred_info.last_addr >> (j*addr_seg_len)) & addr_mask;
	}
	// get d and r;
	int m;
	for (m=0;m<64;m++){
		addr_real[m] = (addr >> m) & 1;
		addr_pred[m] = (last_pred_info.last_pred >> m ) & 1;
		
		// update wmi and wmj
		for(i=0;i<IP_SEGMENT;i++){
			if( (addr_real[m]-addr_pred[m]) == 1){
				IP_weight[m][i] = IP_weight[m][i] + ALPHA * double(ip_seg[i]);
			}else if ( (addr_real[m]-addr_pred[m]) == -1){
				IP_weight[m][i] = IP_weight[m][i] - ALPHA * double(ip_seg[i]);
			}
		}
		for(j=0;j<ADDR_SEGMENT;j++){
			if( (addr_real[m]-addr_pred[m]) == 1){
				ADDR_weight[m][j] = ADDR_weight[m][j] + ALPHA * double(addr_seg[j]);
			}else if ( (addr_real[m]-addr_pred[m]) == -1){
				ADDR_weight[m][j] = ADDR_weight[m][j] - ALPHA * double(addr_seg[j]);
			}
		}
	}
}
uint64_t perceptron_predict(uint64_t addr, uint64_t ip){

	uint64_t ip_seg [IP_SEGMENT];
	uint64_t addr_seg [ADDR_SEGMENT];

	int ip_seg_len = 64/IP_SEGMENT;
	int addr_seg_len = 64/ADDR_SEGMENT;

	// making input vector

	uint64_t ip_mask = (1 << ip_seg_len) - 1;
	uint64_t addr_mask = (1 << addr_seg_len) - 1;
	int i,j;
	for (i =0;i < IP_SEGMENT; i++){
		ip_seg [i] = (ip >> (i*ip_seg_len) ) & ip_mask;
	}
	for (j=0;j<ADDR_SEGMENT;j++){
		addr_seg [j] = (addr >> (j*addr_seg_len)) & addr_mask;
	}

	// getting output
	bitset<64> addr_pred;
	for (int m =0; m<64;m++){
		double y = 0;
		
		for (i=0;i<IP_SEGMENT;i++){
			y = y +  IP_weight[m][i] * ip_seg[i];
		}
		for(j=0;j<ADDR_SEGMENT;j++){
			y = y + ADDR_weight[m][j] * addr_seg[j];
		}
		//output 1 when y >= 0;
		if(y>=0){
			addr_pred[m] = 1;
		}else{
			addr_pred[m] = 0;
		}
	}

	uint64_t addr_pred_ret = addr_pred.to_ulong();
	return addr_pred_ret;
}

void CACHE::l2c_prefetcher_initialize() 
{
    cout << "CPU " << cpu << " L2C IP-based stride prefetcher" << endl;
    // initialize all weight
    for (int m=0; m<64; m++){
    	for (int i=0; i<IP_SEGMENT;i++){
    		IP_weight[m][i] = 0;
    	}
    	for (int j=0; j< ADDR_SEGMENT; j++){
    		ADDR_weight[m][j] = 0;
    	}
    }
}


void CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{
	// update weight if not hit
    if (addr != last_pred_info.last_pred){
    	//printf("updating weight\n");
    	weight_update(addr,ip);
    }

    // generate prediction
    uint64_t pred_addr;
    pred_addr = perceptron_predict(addr, ip);
    
    //printf("raw pred: %llx, delta_good = %d \n",pred_addr,last_pred_info.delta_good);
    
    // add delta
    //if (last_pred_info.delta_good == 1){
    //	if(last_pred_info.last_delta_sign == 1){
    //		pred_addr = pred_addr + last_pred_info.last_delta;
    //	}else{
    //		pred_addr = pred_addr - last_pred_info.last_delta;
    //	}
    //}

    // generate prefetch

	uint64_t pa_mask = 0xffffffffffffffff << LOG2_BLOCK_SIZE;
    uint64_t pf_address = pred_addr & pa_mask;

    // update prefetch next info
    last_pred_info.last_addr = addr;
    last_pred_info.last_ip = ip;
    last_pred_info.last_pred = pred_addr;
	
    // only issue a prefetch if the prefetch address is in the same 4 KB page
    // as the current demand access address
    if ((pf_address >> LOG2_PAGE_SIZE) == (addr >> LOG2_PAGE_SIZE)){
        // check the MSHR occupancy to decide if we're going to prefetch to the L2 or LLC
    	last_pred_info.fetch_count += 1;
    	if (MSHR.occupancy < (MSHR.SIZE>>1))
         	prefetch_line(ip, addr, pf_address, FILL_L2);
    	else
         	prefetch_line(ip, addr, pf_address, FILL_LLC);
    	
    }
    
    // prefetch degree
    
    for(int i =1; i<PREFETCH_DEGREE; i++){
    	pred_addr = perceptron_predict(pred_addr, ip);
    	pf_address = pred_addr & pa_mask;
    	
    	if ((pf_address >> LOG2_PAGE_SIZE) == (addr >> LOG2_PAGE_SIZE)){
    		last_pred_info.fetch_count += 1;
    		if (MSHR.occupancy < (MSHR.SIZE>>1))
        		prefetch_line(ip, addr, pf_address, FILL_L2);
    		else
         		prefetch_line(ip, addr, pf_address, FILL_LLC);	
    	}
    	
    }



}

void CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr)
{

}

void CACHE::l2c_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " L2C PC-based stride prefetcher final stats" << endl;
	printf("total fetch: %d, total correct prediction: %d \n", last_pred_info.fetch_count, last_pred_info.correct_pred);
}
